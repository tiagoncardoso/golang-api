basePath: /
definitions:
  dto.CreateProductInput:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.GenerateTokenInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.JwtToken:
    properties:
      access_token:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8000
info:
  contact:
    email: tiago.mncardoso@gmail.com
    name: Tiago Cardoso
  description: This is a simple API to manage products and users
  title: Golang API
  version: "1.0"
paths:
  /product:
    get:
      consumes:
      - application/json
      description: Find all products
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: limit of products
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - apiKeyAuth: []
      summary: Find all products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Product created
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - apiKeyAuth: []
      summary: Create a new product
      tags:
      - Product
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - apiKeyAuth: []
      summary: Delete a product
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Find product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - apiKeyAuth: []
      summary: Find product by ID
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - apiKeyAuth: []
      summary: Update a product
      tags:
      - Product
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create user
      tags:
      - user
  /user/getToken:
    post:
      consumes:
      - application/json
      description: Generate a new access token
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GenerateTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JwtToken'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Generate access token
      tags:
      - user
securityDefinitions:
  apiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
